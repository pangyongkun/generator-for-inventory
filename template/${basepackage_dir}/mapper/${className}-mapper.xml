<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>   
<?xml version="1.0" encoding="UTF-8"?>    
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro namespace>${className}.</#macro>

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="${basepackage}.dao.${className}Dao">

	<resultMap id="BaseResultMap" type="${basepackage}.been.${className}">
        <#list table.columns as column>
        <result property="${column.columnNameLower}" column="${column.sqlName}"/>
		</#list>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
		<#list table.columns as column>${column.sqlName}<#if column_has_next>,</#if></#list>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="${table.idColumn.columnNameFirstLower}">
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
        	${column.sqlName} <#if column_has_next>,</#if>
        </#list>
        ) VALUES (
        <#list table.columns as column>
        	<@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
        </#list>        
        )
	</insert>
    
	<update id="update" >
        UPDATE ${table.sqlName} SET
	        <#list table.notPkColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
	        </#list>
        WHERE 
        	<#list table.compositeIdColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameLower/> <#if column_has_next>,</#if>
	        </#list>	        
	</update>

    <delete id="physicalDelete">
        DELETE FROM ${table.sqlName} WHERE
        <#list table.compositeIdColumns as column>
        ${column.sqlName} = <@mapperEl column.columnNameLower/> <#if column_has_next>,</#if>
		</#list>
    </delete>
    
    <select id="logicalDelete" resultMap="BaseResultMap">
		UPDATE ${table.sqlName} SET
		IS_DELETE = 1
		WHERE
				<#list table.compositeIdColumns as column>
		        ${column.sqlName} = <@mapperEl column.columnNameLower/> <#if column_has_next>,</#if>
		        </#list>    
	</select>

	<select id="select${className}ById" resultMap="BaseResultMap">
		SELECT <include refid="columns" />
		    FROM ${table.sqlName} 
	        WHERE 
				<#list table.compositeIdColumns as column>
		        ${column.sqlName} = <@mapperEl column.columnNameLower/> <#if column_has_next>,</#if>
		        </#list>    
	</select>
	
	<sql id="where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <#list table.columns as column>
	       <if test="keyword!=null">
				OR ${column.sqlName} like <@mapperEl 'keyword'/>
			</if>
	       </#list>			
		</where>
	</sql>

	<sql id="limit">
		<if test="lineStart!=null">
				limit <@mapperEl 'lineStart'/>,<@mapperEl 'pageSize'/>
		</if>
	</sql>
		
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="BaseResultMap">
    	SELECT <include refid="columns" />
	    FROM ${table.sqlName} 
		<include refid="where"/>
		
		<if test="orderBy!=null">
			ORDER BY <@jspEl 'orderBy'/>
		</if>
		<include refid="limit"/>
    </select>
	
</mapper>

